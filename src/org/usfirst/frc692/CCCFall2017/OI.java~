// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.CCCFall2017;

import org.usfirst.frc692.CCCFall2017.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc692.CCCFall2017.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton climberMotorClimbUpStartButton;
    public JoystickButton feederMotorReverseToggleBackButton;
    public JoystickButton feederMotorReverseToggleDoneBackButton;
    public JoystickButton shooterShootRB;
    public JoystickButton shooterStopShootRB;
    public JoystickButton shooterResetToFastLB;
    public JoystickButton shooterIncreaseSpeedButtonY;
    public JoystickButton shooterIncreaseSpeedDoneButtonY;
    public JoystickButton shooterDecreaseSpeedButtonA;
    public JoystickButton shooterDecreaseSpeedDoneButtonA;
    public Joystick gamepad;
    public JoystickButton intakeMotorForwardToggleButton1;
    public JoystickButton intakeMotorForwardToggleDoneButton1;
    public JoystickButton intakeMotorReverseToggleButton3;
    public JoystickButton intakeMotorReverseToggleDoneButton3;
    public Joystick joystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick = new Joystick(1);
        
        intakeMotorReverseToggleDoneButton3 = new JoystickButton(joystick, 3);
        intakeMotorReverseToggleDoneButton3.whenPressed(new IntakeMotorReverseToggleDone());
        intakeMotorReverseToggleButton3 = new JoystickButton(joystick, 3);
        intakeMotorReverseToggleButton3.whenPressed(new IntakeMotorReverseToggle());
        intakeMotorForwardToggleDoneButton1 = new JoystickButton(joystick, 1);
        intakeMotorForwardToggleDoneButton1.whenPressed(new IntakeMotorForwardToggleDone());
        intakeMotorForwardToggleButton1 = new JoystickButton(joystick, 1);
        intakeMotorForwardToggleButton1.whenPressed(new IntakeMotorForwardToggle());
        gamepad = new Joystick(0);
        
        shooterDecreaseSpeedDoneButtonA = new JoystickButton(gamepad, 1);
        shooterDecreaseSpeedDoneButtonA.whenReleased(new ShooterDecreaseSpeedDone());
        shooterDecreaseSpeedButtonA = new JoystickButton(gamepad, 1);
        shooterDecreaseSpeedButtonA.whenPressed(new ShooterDecreaseSpeed());
        shooterIncreaseSpeedDoneButtonY = new JoystickButton(gamepad, 4);
        shooterIncreaseSpeedDoneButtonY.whenReleased(new ShooterIncreaseSpeedDone());
        shooterIncreaseSpeedButtonY = new JoystickButton(gamepad, 4);
        shooterIncreaseSpeedButtonY.whenPressed(new ShooterIncreaseSpeed());
        shooterResetToFastLB = new JoystickButton(gamepad, 5);
        shooterResetToFastLB.whenPressed(new ShooterResetToFast());
        shooterStopShootRB = new JoystickButton(gamepad, 6);
        shooterStopShootRB.whenReleased(new ShooterStopShoot());
        shooterShootRB = new JoystickButton(gamepad, 6);
        shooterShootRB.whileHeld(new ShooterShoot());
        feederMotorReverseToggleDoneBackButton = new JoystickButton(gamepad, 7);
        feederMotorReverseToggleDoneBackButton.whenPressed(new FeederMotorReverseToggleDone());
        feederMotorReverseToggleBackButton = new JoystickButton(gamepad, 7);
        feederMotorReverseToggleBackButton.whenPressed(new FeederMotorReverseToggle());
        climberMotorClimbUpStartButton = new JoystickButton(gamepad, 8);
        climberMotorClimbUpStartButton.whileHeld(new ClimberMotorClimbUp());


        // SmartDashboard Buttons
        SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
        SmartDashboard.putData("ClimberMotorClimbUp", new ClimberMotorClimbUp());
        SmartDashboard.putData("FeederMotorReverseToggle", new FeederMotorReverseToggle());
        SmartDashboard.putData("FeederMotorReverseToggleDone", new FeederMotorReverseToggleDone());
        SmartDashboard.putData("ShooterResetToFast", new ShooterResetToFast());
        SmartDashboard.putData("ShooterIncreaseSpeed", new ShooterIncreaseSpeed());
        SmartDashboard.putData("ShooterIncreaseSpeedDone", new ShooterIncreaseSpeedDone());
        SmartDashboard.putData("ShooterDecreaseSpeed", new ShooterDecreaseSpeed());
        SmartDashboard.putData("ShooterDecreaseSpeedDone", new ShooterDecreaseSpeedDone());
        SmartDashboard.putData("ShooterShoot", new ShooterShoot());
        SmartDashboard.putData("ShooterStopShoot", new ShooterStopShoot());
        SmartDashboard.putData("IntakeMotorForwardToggle", new IntakeMotorForwardToggle());
        SmartDashboard.putData("IntakeMotorForwardToggleDone", new IntakeMotorForwardToggleDone());
        SmartDashboard.putData("IntakeMotorReverseToggle", new IntakeMotorReverseToggle());
        SmartDashboard.putData("IntakeMotorReverseToggleDone", new IntakeMotorReverseToggleDone());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getGamepad() {
        return gamepad;
    }

    public Joystick getJoystick() {
        return joystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

