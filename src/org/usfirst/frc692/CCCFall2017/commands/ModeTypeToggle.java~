// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.CCCFall2017.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc692.CCCFall2017.MyGlobal;
import org.usfirst.frc692.CCCFall2017.Robot;

/**
 *
 */
public class ModeTypeToggle extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ModeTypeToggle() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(MyGlobal.isModeTypePressed == false) {
    		MyGlobal.isModeTypePressed = true;
    		switch(MyGlobal.driveModeSelected) {
	    		case arcade:
	    			switch(MyGlobal.arcadeTypeSelected) {
	    			case simple:
	    				MyGlobal.arcadeTypeSelected = MyGlobal.ArcadeTypes.simpleWithTwist;
	    				break;	
	    			case simpleWithTwist:
	    				MyGlobal.arcadeTypeSelected = MyGlobal.ArcadeTypes.squared;
	    				break;
	    			case squared:
	    				MyGlobal.arcadeTypeSelected = MyGlobal.ArcadeTypes.squaredWithDeadZone;
	    				break;
	    			case squaredWithDeadZone:
	    				MyGlobal.arcadeTypeSelected = MyGlobal.ArcadeTypes.simple;
	    				break;
	    			}
	    			SmartDashboard.putString(MyGlobal.MODE_TYPE_DISPLAY, MyGlobal.arcadeTypeSelected.toString());
	    			break;
	    			
	    		case mecanum:
	    			switch(MyGlobal.mecanumTypeSelected) {
	    			case simple:
	    				MyGlobal.mecanumTypeSelected = MyGlobal.MecanumTypes.squared;
	    				break;
	    			case squared:
	    				MyGlobal.mecanumTypeSelected = MyGlobal.MecanumTypes.simple;
	    				break;
	    			}
	    			SmartDashboard.putString(MyGlobal.MODE_TYPE_DISPLAY, MyGlobal.mecanumTypeSelected.toString());
	    			break;
	    			
	    		case tank:
	    			switch(MyGlobal.tankTypeSelected) {
	    			case simple:
	    				MyGlobal.tankTypeSelected = MyGlobal.TankTypes.squared;
	    				break;
	    			case squared:
	    				MyGlobal.tankTypeSelected = MyGlobal.TankTypes.simple;
	    				break;
	    			}
	    			SmartDashboard.putString(MyGlobal.MODE_TYPE_DISPLAY, MyGlobal.tankTypeSelected.toString());
	    			break;
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
