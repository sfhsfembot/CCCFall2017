// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.CCCFall2017.subsystems;

import org.usfirst.frc692.CCCFall2017.MyGlobal;
import org.usfirst.frc692.CCCFall2017.RobotMap;
import org.usfirst.frc692.CCCFall2017.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Feeder extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController feederMotor = RobotMap.feederFeederMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void forward() {
    	MyGlobal.feederMotorStatus = MyGlobal.motorStatus.fwd;
    	int speed = 0;
    	if(MyGlobal.shooterSpeed >= MyGlobal.FEEDER_SPEED) {
    		speed = MyGlobal.FEEDER_SPEED;
    	}
    	else {
    		speed = MyGlobal.shooterSpeed;
    	}
    	feederMotor.set((double)((double)speed/(double)10));
    	SmartDashboard.putString("Feeder Status", "Forward");
    }
    
    public void reverse() {
    	MyGlobal.feederMotorStatus = MyGlobal.motorStatus.rev;
		double speed = (double)((double)(-MyGlobal.FEEDER_SPEED)/(double)10);
		feederMotor.set(speed);
    	SmartDashboard.putString("Feeder Status", "Reverse");
    }
    
    public void stop() {
    	MyGlobal.feederMotorStatus = MyGlobal.motorStatus.off;
    	feederMotor.set(0);
    	SmartDashboard.putString("Feeder Status", "Off");
    }
}

